version: '2.3'

x-lagoon-project:
  # Lagoon project name (leave `&lagoon-project` when you edit this).
  # Note that we need to provide env default values for execution on lagoon.
  &lagoon-project ${COMPOSE_PROJECT_NAME:-{{ project }}}

x-labels:
  &default-labels
    # Define labels added to all containers.
    lupus-ci.job_name: ${LUPUS_CI_JOB_NAME:-}

x-container:
  &container-defaults
    restart: ${COMPOSER_CONTAINER_RESTART:-always}

x-volumes:
  &default-volumes
    # Define all volumes you would like to have real-time mounted into the docker containers
    volumes:
      - ${COMPOSE_CACHE_DIR:-./devsetup-docker/data}/.composer/cache:/home/.composer/cache
      - ${COMPOSE_CACHE_DIR:-./devsetup-docker/data}/.npm:/home/.npm
      - ${COMPOSE_APP_DIR:-.}:/app:delegated

x-networks:
  &add-traefik
    default: {}
    traefik: {}

x-environment:
  &default-environment
    LAGOON_PROJECT: *lagoon-project
    # Route that should be used locally, if you are using pygmy,
    # this route *must* end with .docker.amazee.io
    LAGOON_ROUTE: http://${COMPOSE_HOSTNAME}
    # Uncomment if you like to have the system behave like in production
    #LAGOON_ENVIRONMENT_TYPE: production

    MARIADB_DATABASE: ${PHAPP_ENV_MYSQL_DEFAULT_DATABASE:-drupal}
    MARIADB_USER: ${PHAPP_ENV_MYSQL_DEFAULT_USERNAME:-drupal}
    MARIADB_PASSWORD: ${PHAPP_ENV_MYSQL_DEFAULT_PASSWORD:-change-me}
    MARIADB_ROOT_PASSWORD: ${PHAPP_ENV_MYSQL_DEFAULT_PASSWORD:-Lag00n-change-me}

    # Pass through some lupus-ci env variables; e.g. the now token for automated deployment.
    NOW_TOKEN: ${NOW_TOKEN:-}
    GIT_BRANCH: ${GIT_BRANCH:-}
    # Comment to disable Redis cache and cache failover
    ENABLE_REDIS: "true"

x-user:
  &default-user
    # The default user under which the containers should run.
    # Change this if you are on linux and run with another user than id `1000`
    user: ${COMPOSE_DEFAULT_USER:-1000}

services:
  # cli container, will be used for executing composer and any local commands
  # (drush, drupal, etc.)
  # This image will be reused as `CLI_IMAGE` in subsequent Docker builds.
  cli:
    build:
      context: .
      dockerfile: devsetup-docker/Dockerfile.cli
      args:
        APP_FILES: ${COMPOSE_BUILD_APP_FILES:-.}
        LAGOON_SSH_PRIVATE_KEY: ${LAGOON_SSH_PRIVATE_KEY:-}
        COMPOSE_DEFAULT_USER: ${COMPOSE_DEFAULT_USER:-1000}
        COMPOSE_AMAZEEIO_PHP_VERSION: ${COMPOSE_AMAZEEIO_PHP_VERSION:-7.4}
        COMPOSE_AMAZEEIO_VERSION: ${COMPOSE_AMAZEEIO_VERSION:-latest}
    image: *lagoon-project
    labels:
      # Lagoon Labels
      lagoon.type: cli-persistent
      lagoon.persistent.name: nginx # mount the persistent storage of nginx into this container
      lagoon.persistent: /app/files/ # location where the persistent storage should be mounted
      << : *default-labels
    << : *default-volumes # loads the defined volumes from the top
    <<: *default-user # uses the defined user from top
    << : *container-defaults
    environment:
      << : *default-environment # loads the defined environment variables from the top
    networks:
      << : *add-traefik

  nginx:
    build:
      context: devsetup-docker
      dockerfile: Dockerfile.nginx
      args:
        COMPOSE_AMAZEEIO_VERSION: ${COMPOSE_AMAZEEIO_VERSION:-latest}
        CLI_IMAGE: *lagoon-project # Inject the name of the cli image
    labels:
      lagoon.type: nginx-php-persistent
      lagoon.persistent: /app/files/ # define where the persistent storage should be mounted too
      traefik.enable: true
      traefik.port: 8080
      traefik.frontend.rule: "HostRegexp:nginx.{subdomain:([0-9A-Za-z_-]+.)?}${COMPOSE_HOSTNAME}"
      traefik.frontend.auth.basic.users: ${COMPOSE_DEFAULT_AUTH:-}
      << : *default-labels
    << : *default-volumes # loads the defined volumes from the top
    << : *default-user # uses the defined user from top
    << : *container-defaults
    depends_on:
      - cli # basically just tells docker-compose to build the cli first
    environment:
      << : *default-environment # loads the defined environment variables from the top
      LAGOON_LOCALDEV_URL: ${COMPOSE_HOSTNAME} # generate another route for nginx, by default we go to varnish
    networks:
      << : *add-traefik

  php:
    build:
      context: devsetup-docker
      dockerfile: Dockerfile.php
      args:
        COMPOSE_AMAZEEIO_PHP_VERSION: ${COMPOSE_AMAZEEIO_PHP_VERSION:-7.4}
        COMPOSE_AMAZEEIO_VERSION: ${COMPOSE_AMAZEEIO_VERSION:-latest}
        CLI_IMAGE: *lagoon-project
    labels:
      lagoon.type: nginx-php-persistent
      lagoon.name: nginx # we want this service be part of the nginx pod in Lagoon
      lagoon.persistent: /app/files/ # define where the persistent storage should be mounted too
      << : *default-labels
    << : *default-volumes # loads the defined volumes from the top
    << : *container-defaults
    << : *default-user # uses the defined user from top
    depends_on:
      - cli # basically just tells docker-compose to build the cli first
    environment:
      << : *default-environment # loads the defined environment variables from the top

  mariadb:
    build:
      context: devsetup-docker
      dockerfile: Dockerfile.mariadb
      args:
        COMPOSE_AMAZEEIO_VERSION: ${COMPOSE_AMAZEEIO_VERSION:-latest}
    labels:
      lagoon.type: mariadb
      << : *default-labels
    << : *default-user # uses the defined user from top
    << : *container-defaults
    environment:
      << : *default-environment
    volumes:
      - data-volume:/var/lib/mysql

  redis:
    build:
      context: devsetup-docker
      dockerfile: Dockerfile.redis
      args:
        COMPOSE_AMAZEEIO_VERSION: ${COMPOSE_AMAZEEIO_VERSION:-latest}
    labels:
      lagoon.type: redis
      << : *default-labels
    << : *default-user # uses the defined user from top
    << : *container-defaults
    environment:
      << : *default-environment

## Enable, if memcached should be used instead of redis (above).
#  memcached:
#     image: memcached:${MEMCACHED_VERSION:-1.5.2}
#     command: ["-m", "${MEMCACHED_MEMORY:-32M}"]
#     << : *container-defaults
#     labels:
#       << : *default-labels

  solr:
    build:
      context: devsetup-docker
      dockerfile: Dockerfile.solr
      args:
        COMPOSE_AMAZEEIO_VERSION: ${COMPOSE_AMAZEEIO_VERSION:-latest}
    labels:
      lagoon.type: solr
      << : *default-labels
    << : *container-defaults
    environment:
      << : *default-environment

  varnish:
    build:
      context: devsetup-docker
      dockerfile: Dockerfile.varnish
      args:
        COMPOSE_AMAZEEIO_VERSION: ${COMPOSE_AMAZEEIO_VERSION:-latest}
    labels:
      lagoon.type: varnish
      traefik.enable: true
      ## Restrict access for GET and POST request but allow CORS OPTIONS request without password.
      traefik.servicemain.frontend.rule: "Method:GET,POST,HEAD,PUT,PATCH,DELETE;HostRegexp:{subdomain:([0-9A-Za-z_-]+.)?}${COMPOSE_HOSTNAME}"
      traefik.servicemain.frontend.auth.basic.users: ${COMPOSE_DEFAULT_AUTH:-}
      traefik.servicecors.frontend.rule: "Method:OPTIONS;HostRegexp:{subdomain:([0-9A-Za-z_-]+.)?}${COMPOSE_HOSTNAME}"
      traefik.port: 80
      << : *default-labels
    links:
      - nginx # links varnish to the nginx in this docker-compose project, or it would try to connect to any nginx running in docker
    << : *container-defaults
    environment:
      << : *default-environment
      LISTEN: ":80"
      VARNISH_BACKEND_HOST: nginx
      VARNISH_BYPASS: "true" # by default we bypass varnish, change to 'false' or remove in order to tell varnish to cache if possible
    networks:
      << : *add-traefik

networks:
  traefik:
    name: traefik
    external: true

volumes:
  data-volume:
